model_building     <- full_data[random_ix_leftover,]
write.csv(model_building, "../../data/machine-learning/mann-whitney/model-9010")
random_ix_leftover <- setdiff(c(1:148), random_ix)
model_building     <- full_data[random_ix_leftover,]
write.csv(model_building, "../../data/machine-learning/mann-whitney/model-9010.csv")
random_ix_leftover <- setdiff(c(1:148), random_ix)
model_building     <- full_data[random_ix_leftover,]
write.csv(model_building, "../../data/machine-learning/mann-whitney/model-8020.csv")
test_n  <- round(nrow(full_data)*0.2)
train_n <- nrow(full_data) - round(nrow(full_data)*0.2)
c(test_n, train_n)
random_ix <- sample(x=c(1:148), test_n)
random_ix
final_validation <- full_data[random_ix,]
write.csv(final_validation, "../../data/machine-learning/mann-whitney/validation-8020.csv")
random_ix_leftover <- setdiff(c(1:148), random_ix)
model_building     <- full_data[random_ix_leftover,]
write.csv(model_building, "../../data/machine-learning/mann-whitney/model-8020.csv")
full_data <- read.csv("../../data/genbank/05-full-data.csv")[,-1]
head(full_data)
endos <- full_data[which(full_data$endometriosis=="Endometriosis"), -c(1:4)]
nons  <- full_data[which(full_data$endometriosis!="Endometriosis"), -c(1:4)]
head(endos)
head(nons)
pvals <- sapply(1:ncol(endos), function(k) {
wilcox.test(x=endos[,k], y=nons[,k], alternative="two.sided", exact=FALSE)$p.value
})
hist(pvals, xlab="Mann-Whitney p-values", col="grey7", main="Unadjusted p-values")
abline(v=0.05, lwd=3, lty=1, col="indianred")
padj <- p.adjust(pvals, method="fdr")
hist(padj, xlab="Mann-Whitney p-values", col="grey7", main="Unadjusted p-values")
abline(v=0.05, lwd=3, lty=1, col="indianred")
df <- data.frame(which(padj<0.05), cbind(names(nons)[which(padj<0.05)], padj[which(padj<0.05)]))
names(df) <- c("ix", "gene", "pval")
df$pval <- as.numeric(as.character(df$pval))
df <- df %>% arrange(pval)
library(dplyr)
full_data <- read.csv("../../data/genbank/05-full-data.csv")[,-1]
head(full_data)
endos <- full_data[which(full_data$endometriosis=="Endometriosis"), -c(1:4)]
nons  <- full_data[which(full_data$endometriosis!="Endometriosis"), -c(1:4)]
head(endos)
head(nons)
pvals <- sapply(1:ncol(endos), function(k) {
wilcox.test(x=endos[,k], y=nons[,k], alternative="two.sided", exact=FALSE)$p.value
})
hist(pvals, xlab="Mann-Whitney p-values", col="grey7", main="Unadjusted p-values")
abline(v=0.05, lwd=3, lty=1, col="indianred")
padj <- p.adjust(pvals, method="fdr")
hist(padj, xlab="Mann-Whitney p-values", col="grey7", main="Unadjusted p-values")
abline(v=0.05, lwd=3, lty=1, col="indianred")
df <- data.frame(which(padj<0.05), cbind(names(nons)[which(padj<0.05)], padj[which(padj<0.05)]))
names(df) <- c("ix", "gene", "pval")
df$pval <- as.numeric(as.character(df$pval))
df <- df %>% arrange(pval)
head(df, 30)
dim(df)
ix <- which(padj<0.05) + 4
mw_genes <- full_data[,c(c(1:4), ix)]
head(mw_genes)
write.csv(mw_genes, "../../data/genbank/06-mw-genes.csv")
padj <- p.adjust(pvals, method="fdr")
hist(padj, xlab="Mann-Whitney p-values", col="grey7", main="Adjusted p-values")
abline(v=0.05, lwd=3, lty=1, col="indianred")
ncol(full_data)
sample(x=c(5:ncol(full_data)), size=30)
full_data[,sample(x=c(5:ncol(full_data)), size=30)]
subset <- full_data[,sample(x=c(5:ncol(full_data)), size=30)]
library(ggplot2)
library(reshape2)
subset <- melt(subset)
subset
ggplot(subset, aes(x=value))
ggplot(subset, aes(x=value)) + geom_point()
subset
ggplot(subset, aes(x=value, y=variable)) + geom_point()
library(scales)
ggplot(subset, aes(x=value, y=variable)) + geom_point(col=alpha("black", 0.5))
ggplot(subset, aes(x=value, y=variable)) + geom_point(col=alpha("black", 0.3))
ggplot(subset, aes(x=value)
ggplot(subset, aes(x=value))
ggplot(subset, aes(x=value)) + geom_hist(aes(x=value, y=variable))
ggplot(subset, aes(x=value)) + geom_histogram(aes(x=value, y=variable))
subset <- full_data[,sample(x=c(5:ncol(full_data)), size=30)]
ggplot(subset, aes(x=value)) + geom_histogram(aes(x=value, y=variable))
subset
ggplot(gather(mtcars), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
library(tidyr)
ggplot(gather(mtcars), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(subset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(subset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
theme_bw()
subset <- full_data[,sample(x=c(5:ncol(full_data)), size=30)]
# library(reshape2)
# subset <- melt(subset)
library(ggplot2)
library(scales)
library(tidyr)
ggplot(gather(subset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
theme_bw()
subset <- full_data[,sample(x=c(5:ncol(full_data)), size=30)]
# library(reshape2)
# subset <- melt(subset)
library(ggplot2)
library(scales)
library(tidyr)
ggplot(gather(subset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
theme_bw() +
xlab("") + ylab("") + ggtitle("Selected Gene Expression Histograms")
ggplot(gather(subset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
theme_bw() +
xlab("") + ylab("") + ggtitle("Selected Gene Expression Histograms")
library(ggplot2)
data.frame(a, d)
starting_cut <- read.csv("../../data/genbank/full_data.csv", stringsAsFactors=FALSE)[,-1]
starting_cut <- read.csv("../../data/genbank/05-full-data.csv", stringsAsFactors=FALSE)[,-1]
starting_cut <- read.csv("../../data/genbank/05-full-data.csv", stringsAsFactors=FALSE)[,-1]
head(starting_cut)
unique(starting_cut$endometriosis)
d <-  rowMeans(t(starting_cut[which(starting_cut$endometriosis=="Endometriosis"), 5:ncol(starting_cut)])) -
rowMeans(t(starting_cut[which(starting_cut$endometriosis=="Non-Endometriosis"), 5:ncol(starting_cut)]))
d[1:10]
library(scales)
plot(a, d, col=alpha("cornflowerblue", 0.1), pch=19, ylim=c(-8,8), ylab="M", xlab="d", main="MA Plot")
d <-  rowMeans(t(starting_cut[which(starting_cut$endometriosis=="Endometriosis"), 5:ncol(starting_cut)])) -
rowMeans(t(starting_cut[which(starting_cut$endometriosis=="Non-Endometriosis"), 5:ncol(starting_cut)]))
a <- rowMeans(t(starting_cut[,5:ncol(starting_cut)]))
plot(a, d, col=alpha("cornflowerblue", 0.1), pch=19, ylim=c(-8,8), ylab="M", xlab="d", main="MA Plot")
abline(h=0)
library(scales)
plot(a, d, col=alpha("cornflowerblue", 0.1), pch=19, ylim=c(-8,8), ylab="M", xlab="d", main="MA Plot")
abline(h=0)
library(ggplot2)
data.frame(cbind(a, d))
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=d, y=a)) + geom_point()
ggplot(ma_df, aes(x=a, y=d)) + geom_point()
ggplot(ma_df, aes(x=a, y=d)) + geom_point() + ylim(c(-8,8))
library(ggplot2)
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=a, y=d)) + geom_point() + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Difference")
library(ggplot2)
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=a, y=d)) + geom_point() + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference")
library(ggplot2)
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=a, y=d)) + geom_point(col=alpha("black", 0.3)) + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference")
library(ggplot2)
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=a, y=d)) + geom_point(col=alpha("black", 0.1)) + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference")
library(ggplot2)
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=a, y=d)) + geom_point(col=alpha("black", 0.1)) + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference") + theme_bw()
ggplot(ma_df, aes(x=a, y=d)) + geom_point(col=alpha("black", 0.1)) + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference") + theme_bw()
library(ggplot2)
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=a, y=d)) + geom_point(col=alpha("black", 0.03)) + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference") + theme_bw()
ggplot(ma_df, aes(x=a, y=d)) + geom_point(col=alpha("black", 0.03)) + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference") + theme_bw()
library(ggplot2)
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=a, y=d)) + geom_point(col=alpha("black", 0.03)) + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference") + theme_bw()
plot(a, d, col=alpha("cornflowerblue", 0.1), pch=19, ylim=c(-1,1), ylab="M", xlab="d", main="MA Plot")
abline(h=0)
core_genes <- names(d)[which(abs(d)>1)]
ix <- c(1:4, which(colnames(starting_cut) %in% core_genes))
ending_cut <- starting_cut[,ix]
head(ending_cut)
core_genes
core_genes <- names(d)[which(abs(d)>1)]
ix <- c(1:4, which(colnames(starting_cut) %in% core_genes))
ending_cut <- starting_cut[,ix]
head(ending_cut)
library(dplyr)
core_df <- cbind(core_genes, which(abs(d)>1))
core_df <- data.frame(core_df) %>%
rename(log2expression=V2) %>% arrange(log2expression)
head(core_df)
head(core_df, 12)
core_df <- cbind(core_genes[which(abs(d)>1)], abs(d)[which(abs(d)>1)])
core_df <- data.frame(core_df) %>%
rename(log2expression=V2) %>% arrange(log2expression)
core_df
core_df <- data.frame(core_df)
head(core_df, 12)
core_df <- %>%
core_df <- core_df %>%
rename(log2expression=X2) %>% arrange(log2expression)
core_df
head(core_df, 12)
core_genes[which(abs(d)>1)]
d
core_df <- cbind(names(d)[which(abs(d)>1)], abs(d)[which(abs(d)>1)])
core_df <- data.frame(core_df)
core_df <- core_df %>%
rename(log2expression=X2) %>% arrange(log2expression)
head(core_df, 12)
core_df <- core_df %>%
rename(log2expression=X2) %>% arrange(-log2expression)
core_df <- cbind(names(d)[which(abs(d)>1)], abs(d)[which(abs(d)>1)])
core_df <- data.frame(core_df)
core_df <- core_df %>%
rename(log2expression=X2) %>% arrange(-log2expression)
head(core_df, 12)
library(dplyr)
core_df <- cbind(names(d)[which(abs(d)>1)], abs(d)[which(abs(d)>1)])
core_df <- data.frame(core_df)
core_df <- core_df %>%
rename(log2expression=X2) %>% arrange(-log2expression)
head(core_df, 12)
library(dplyr)
core_df <- cbind(names(d)[which(abs(d)>1)], abs(d)[which(abs(d)>1)])
core_df <- data.frame(core_df)
core_df <- core_df %>% rename(log2expression=X2) %>% arrange(-log2expression)
head(core_df, 12)
core_df <- core_df %>% rename(log2expression=X2) %>% mutate(log2expression=as.numeric(as.character(log2expression))) %>% arrange(-log2expression)
library(dplyr)
core_df <- cbind(names(d)[which(abs(d)>1)], abs(d)[which(abs(d)>1)])
core_df <- data.frame(core_df)
core_df <- core_df %>% rename(log2expression=X2) %>% mutate(log2expression=as.numeric(as.character(log2expression))) %>% arrange(-log2expression)
head(core_df, 12)
library(dplyr)
core_df <- cbind(names(d)[which(abs(d)>1)], abs(d)[which(abs(d)>1)])
core_df <- data.frame(core_df)
core_df <- core_df %>% rename(log2expression=X2) %>% mutate(log2expression=as.numeric(as.character(log2expression))) %>% arrange(-log2expression)
head(core_df, 12)
probes <- core_df %>% filter(grepl("probe", core_genes))
probe_names <- as.character(probes %>% pull(core_genes))
probes <- core_df %>% filter(grepl("probe", core_genes))
probe_names <- as.character(probes %>% pull(core_genes))
probes
probes <- core_df %>% filter(grepl("probe", core_genes))
probes
core_genes
core_df
core_genes <- names(d)[which(abs(d)>1)]
ix <- c(1:4, which(colnames(starting_cut) %in% core_genes))
ending_cut <- starting_cut[,ix]
head(ending_cut)
df$gene
as.character(df$gene)
intersect(core_genes, as.character(df$gene))
unique(intersect(core_genes, as.character(df$gene)))
length(unique(intersect(core_genes, as.character(df$gene))))
# build the final model with mtry = 20 and ntree = 250
rf.final2 <- rf.550
# build the final model with mtry = 20 and ntree = 250
rf.final2 <- rf.550_2
set.seed(4747)
rf.550_2 <- train(severity ~ ., data = endo_train2, method = "rf",
trControl = control, na.action = na.roughfix,
tuneGrid = mtry.tune, ntree = 550, importance = TRUE)
require(caret)  # contains most of the prediction functions we'll use
require(rpart)  # needed for the plotting
library(randomForest)
require(e1071)
# read in the core gene data
core_data <- read.csv("../../../data/genbank/06-mw-genes.csv")
core_class <- core_data[,4] # obtain endo classifications
core_exp <- core_data[,6:387] # expression data
core_genes <- cbind(core_class, core_exp)
colnames(core_genes)[1] <- "endo"
# read in training set v2
train2 <- read.csv("../../../data/machine-learning/mann-whitney/model-9010.csv")
train_class2 <- train2[,4]
train_exp2 <- train2[,6:387]
endo_train2 <- cbind(train_class2, train_exp2)
colnames(endo_train2)[1] <- "severity"
# read in test set v2
test2 <- read.csv("../../../data/machine-learning/mann-whitney/validation-9010.csv")
test_class2 <- test2[,4]
test_exp2 <- test2[,6:387]
endo_test2 <- cbind(test_class2, test_exp2)
colnames(endo_test2)[1] <- "severity"
set.seed(4747)
rf.550_2 <- train(severity ~ ., data = endo_train2, method = "rf",
trControl = control, na.action = na.roughfix,
tuneGrid = mtry.tune, ntree = 550, importance = TRUE)
rf.550_2 <- train(severity ~ ., data = endo_train2, method = "rf",
trControl = control, na.action = na.roughfix,
tuneGrid = mtry.tune, ntree = 550, importance = TRUE)
rf.550_2$finalModel
require(caret)  # contains most of the prediction functions we'll use
require(rpart)  # needed for the plotting
library(randomForest)
require(e1071)
# read in the core gene data
core_data <- read.csv("../../../data/genbank/06-mw-genes.csv")
core_class <- core_data[,4] # obtain endo classifications
core_exp <- core_data[,6:387] # expression data
core_genes <- cbind(core_class, core_exp)
colnames(core_genes)[1] <- "endo"
# read in training set v2
train2 <- read.csv("../../../data/machine-learning/mann-whitney/model-9010.csv")
train_class2 <- train2[,4]
train_exp2 <- train2[,6:387]
endo_train2 <- cbind(train_class2, train_exp2)
colnames(endo_train2)[1] <- "severity"
# read in test set v2
test2 <- read.csv("../../../data/machine-learning/mann-whitney/validation-9010.csv")
test_class2 <- test2[,4]
test_exp2 <- test2[,6:387]
endo_test2 <- cbind(test_class2, test_exp2)
colnames(endo_test2)[1] <- "severity"
# set tuning method and parameter
control <- trainControl(method = "oob")
mtry.tune <- data.frame(mtry = 1:100)
# run with ntree = 550
# optimal mtry = 26
# OOB error = 25.42 %
set.seed(4747)
rf.550_2 <- train(severity ~ ., data = endo_train2, method = "rf",
trControl = control, na.action = na.roughfix,
tuneGrid = mtry.tune, ntree = 550, importance = TRUE)
rf.550_2$finalModel
# build the final model with mtry = 20 and ntree = 250
rf.final2 <- rf.550_2
rf.final2
# try using Random Forest function
set.seed(4747)
rf.function2 <- randomForest(severity ~ ., data = endo_train2, mtry = 11, ntree = 550, importance = TRUE)
rf.function2 <- randomForest(severity ~ ., data = endo_train2, mtry = 11, ntree = 550, importance = TRUE)
rf.function2
predict_rf2 <- confusionMatrix(data = predict(rf.final2, newdata = endo_test2),
reference = endo_test2$severity)
predict_rf2$table
# print test accuracy
rf_accuracy2 <- predict_rf2$overall[1]
rf_accuracy2
set.seed(47)
# create vector for costs
cost <- c(0.001, 0.01, 0.1, 1, 5, 10, 100, 1000)
# fit linear support vector classifier
svmL_2 <- train(severity ~ ., data = endo_train2, method="svmLinear",
trControl = trainControl(method = "cv", number = 4),
tuneGrid = expand.grid(C = cost),
preProcess = c("center", "scale"))
# output the results
svmL_2
svmL_2$finalModel
predict_svm2 <- confusionMatrix(data = predict(svmL_2, newdata = endo_test2),
reference = endo_test2$severity)
predict_svm2$table
# print test accuracy
svm_accuracy2 <- predict_svm2$overall[1]
svm_accuracy2
# ANOTHER WAY
# predict the test data
predict_SVM2 <- predict(svmL_2, endo_test2)
confusion_matrix2 <- table(endo_test2$severity, predict_SVM2)
# calculate test error rate
linearError2 <-  (confusion_matrix2[1,2] + confusion_matrix2[2,1]) / sum(confusion_matrix2)
linearError2
svm_accuracy2
svm_accuracy
# set tuning method and parameter
control <- trainControl(method = "oob")
mtry.tune <- data.frame(mtry = 1:100)
# run and optimize random forest with ntree = 250
# optimal mtry = 6
# OOB error = 28.57%
set.seed(4747)
rf.250 <- train(severity ~ ., data = endo_train, method = "rf",
trControl = control, na.action = na.roughfix,
tuneGrid = mtry.tune, ntree = 250, importance = TRUE)
library(caret)  # contains most of the prediction functions we'll use
library(rpart)  # needed for the plotting
library(randomForest)
library(e1071)
# # read in the core gene data
core_data <- read.csv("../../../data/genbank/06-twofold-genes.csv")
core_class <- core_data[,4] # obtain endo classifications
core_exp <- core_data[,6:387] # expression data
core_genes <- cbind(core_class, core_exp)
colnames(core_genes)[1] <- "endo"
# read in training set
train <- read.csv("../../../data/machine-learning/mann-whitney/model-8020.csv")
train_class <- train[,4]
train_exp <- train[,6:387]
endo_train <- cbind(train_class, train_exp)
colnames(endo_train)[1] <- "severity"
# read in test set
test <- read.csv("../../../data/machine-learning/mann-whitney/validation-8020.csv")
test_class <- test[,4]
test_exp <- test[,6:387]
endo_test <- cbind(test_class, test_exp)
colnames(endo_test)[1] <- "severity"
# set tuning method and parameter
control <- trainControl(method = "oob")
mtry.tune <- data.frame(mtry = 1:100)
# run and optimize random forest with ntree = 250
# optimal mtry = 6
# OOB error = 28.57%
set.seed(4747)
rf.250 <- train(severity ~ ., data = endo_train, method = "rf",
trControl = control, na.action = na.roughfix,
tuneGrid = mtry.tune, ntree = 250, importance = TRUE)
rf.250$finalModel
# build the final model with mtry = 17 and ntree = 400
rf.final <- rf.250
rf.final
# try using Random Forest function
set.seed(47)
rf.function <- randomForest(severity ~ ., data = endo_train, mtry = 65, ntree = 250, importance = TRUE)
rf.function
set.seed(47)
predict_rf <- confusionMatrix(data = predict(rf.final, newdata = endo_test),
reference = endo_test$severity)
predict_rf$table
# print test accuracy
rf_accuracy <- predict_rf$overall[1]
rf_accuracy
core_data <- read.csv("../../../data/genbank/00-raw-data.csv")
library(dplyr)
full_data <- read.csv("../../data/genbank/05-full-data.csv")[,-1]
library(dplyr)
full_data <- read.csv("../../data/genbank/05-full-data.csv")[,-1]
head(full_data)
subset <- full_data[,sample(x=c(5:ncol(full_data)), size=30)]
# library(reshape2)
# subset <- melt(subset)
library(ggplot2)
library(scales)
library(tidyr)
ggplot(gather(subset), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x') +
theme_bw() +
xlab("") + ylab("") + ggtitle("Selected Gene Expression Histograms")
endos <- full_data[which(full_data$endometriosis=="Endometriosis"), -c(1:4)]
nons  <- full_data[which(full_data$endometriosis!="Endometriosis"), -c(1:4)]
head(endos)
head(nons)
pvals <- sapply(1:ncol(endos), function(k) {
wilcox.test(x=endos[,k], y=nons[,k], alternative="two.sided", exact=FALSE)$p.value
})
hist(pvals, xlab="Mann-Whitney p-values", col="grey7", main="Unadjusted p-values")
abline(v=0.05, lwd=3, lty=1, col="indianred")
padj <- p.adjust(pvals, method="fdr")
hist(padj, xlab="Mann-Whitney p-values", col="grey7", main="Adjusted p-values")
abline(v=0.05, lwd=3, lty=1, col="indianred")
df <- data.frame(which(padj<0.05), cbind(names(nons)[which(padj<0.05)], padj[which(padj<0.05)]))
names(df) <- c("ix", "gene", "pval")
df$pval <- as.numeric(as.character(df$pval))
df <- df %>% arrange(pval)
head(df, 30)
dim(df)
ix <- which(padj<0.05) + 4
mw_genes <- full_data[,c(c(1:4), ix)]
head(mw_genes)
# write.csv(mw_genes, "../../data/genbank/06-mw-genes.csv")
starting_cut <- read.csv("../../data/genbank/05-full-data.csv", stringsAsFactors=FALSE)[,-1]
head(starting_cut)
unique(starting_cut$endometriosis)
d <-  rowMeans(t(starting_cut[which(starting_cut$endometriosis=="Endometriosis"), 5:ncol(starting_cut)])) -
rowMeans(t(starting_cut[which(starting_cut$endometriosis=="Non-Endometriosis"), 5:ncol(starting_cut)]))
d[1:10]
a <- rowMeans(t(starting_cut[,5:ncol(starting_cut)]))
library(scales)
plot(a, d, col=alpha("cornflowerblue", 0.1), pch=19, ylim=c(-8,8), ylab="M", xlab="d", main="MA Plot")
abline(h=0)
library(ggplot2)
ma_df <- data.frame(cbind(a, d))
ggplot(ma_df, aes(x=a, y=d)) + geom_point(col=alpha("black", 0.03)) + ylim(c(-8,8)) + ggtitle("MA Plot") + xlab("Expression Average") + ylab("Average Expression Difference") + theme_bw()
plot(a, d, col=alpha("cornflowerblue", 0.1), pch=19, ylim=c(-1,1), ylab="M", xlab="d", main="MA Plot")
abline(h=0)
core_genes <- names(d)[which(abs(d)>1)]
ix <- c(1:4, which(colnames(starting_cut) %in% core_genes))
ending_cut <- starting_cut[,ix]
head(ending_cut)
library(dplyr)
core_df <- cbind(names(d)[which(abs(d)>1)], abs(d)[which(abs(d)>1)])
core_df <- data.frame(core_df)
core_df <- core_df %>% rename(log2expression=X2) %>% mutate(log2expression=as.numeric(as.character(log2expression))) %>% arrange(-log2expression)
head(core_df, 12)
probes <- core_df %>% filter(grepl("probe", core_genes))
probe_names <- as.character(probes %>% pull(X1))
probe_names <- gsub("probe_", "", probe_names)
probe_names
length(unique(intersect(core_genes, as.character(df$gene))))
# write.csv(ending_cut, "../../data/genbank/06-something.....csv")
from_tf <- as.character(core_df %>% pull(X1))
from_mw <- as.character(df$gene)
length(from_mw)
five_a <- read.csv("../../data/tamaresis/table-5a.csv")
five_b <- read.csv("../../data/tamaresis/table-5b.csv")
tamaresis <- c(as.character(five_a$Gene.Symbol), as.character(five_b$Gene.Symbol))
# tamaresis <- c(as.character(five_a$Probe.Set.ID), as.character(five_b$Probe.Set.ID))
length(unique(tamaresis))
length(intersect(from_tf, tamaresis)) / length(from_tf)
length(intersect(from_mw, tamaresis)) / length(from_mw)
hi <- read.csv("../../data/genbank/01-normalized.csv")
from_tf
intersect(from_tf, from_mw)
length(intersect(from_tf, from_mw))
from_tf
from_mw
length(from_mw)
length(from_tf)
